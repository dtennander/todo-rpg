// tslint:disable
// eslint-disable
/**
 * To-Do RPG API
 * The API of the To-Do RPG web app. Available for all to use to integrate agains us.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ListView,
    ListViewFromJSON,
    ListViewToJSON,
    SmallListView,
    SmallListViewFromJSON,
    SmallListViewToJSON,
    WriteListView,
    WriteListViewFromJSON,
    WriteListViewToJSON,
} from '../models';

export interface CreateListRequest {
    WriteListView: WriteListView;
}

export interface GetListRequest {
    id: number;
}

/**
 * no description
 */
export class ListsApi extends runtime.BaseAPI {

    /**
     * Create a new List.
     */
    async createListRaw(requestParameters: CreateListRequest): Promise<runtime.ApiResponse<ListView>> {
        if (requestParameters.WriteListView === null || requestParameters.WriteListView === undefined) {
            throw new runtime.RequiredError('WriteListView','Required parameter requestParameters.WriteListView was null or undefined when calling createList.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/lists`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WriteListViewToJSON(requestParameters.WriteListView),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListViewFromJSON(jsonValue));
    }

    /**
     * Create a new List.
     */
    async createList(requestParameters: CreateListRequest): Promise<ListView> {
        const response = await this.createListRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get a specirfic list.
     */
    async getListRaw(requestParameters: GetListRequest): Promise<runtime.ApiResponse<ListView>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getList.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/list/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListViewFromJSON(jsonValue));
    }

    /**
     * Get a specirfic list.
     */
    async getList(requestParameters: GetListRequest): Promise<ListView> {
        const response = await this.getListRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get a list of all ToDo lists.
     */
    async getListsRaw(): Promise<runtime.ApiResponse<Array<SmallListView>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/lists`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SmallListViewFromJSON));
    }

    /**
     * Get a list of all ToDo lists.
     */
    async getLists(): Promise<Array<SmallListView>> {
        const response = await this.getListsRaw();
        return await response.value();
    }

}
